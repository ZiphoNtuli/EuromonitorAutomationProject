{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 0,
    "pending": 0,
    "failures": 2,
    "start": "2025-03-05T14:24:11.923Z",
    "end": "2025-03-05T14:25:00.431Z",
    "duration": 48508,
    "testsRegistered": 2,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "7be8867e-2447-4b92-8df9-5103ae492a56",
      "title": "",
      "fullFile": "cypress\\e2e\\features\\Transfers.feature",
      "file": "cypress\\e2e\\features\\Transfers.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "267b9139-8d85-4918-8ff5-b66b942a75ab",
          "title": "Transfers",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC5064 - Transfer - Erven By Township",
              "fullTitle": "Transfers TC5064 - Transfer - Erven By Township",
              "timedOut": null,
              "duration": 18956,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {
                "message": "Error: \nStep implementation missing for \"I confirm the Search Confirmation header from the search confirmation box\".\n\nWe tried searching for files containing step definitions using the following search pattern templates:\n\n  - cypress/e2e/stepDefinition/*.ts\n\nThese templates resolved to the following search patterns:\n\n  - cypress\\e2e\\stepDefinition\\*.ts\n\nThese patterns matched the following files:\n\n  - cypress\\e2e\\stepDefinition\\WorldCompliance.ts\n  - cypress\\e2e\\stepDefinition\\WinDeedSpider.ts\n  - cypress\\e2e\\stepDefinition\\WindeedPropertyReport.ts\n  - cypress\\e2e\\stepDefinition\\TUVehicleEnquiry.ts\n  - cypress\\e2e\\stepDefinition\\Transfers.ts\n  - cypress\\e2e\\stepDefinition\\Property.ts\n  - cypress\\e2e\\stepDefinition\\PersonSearch.ts\n  - cypress\\e2e\\stepDefinition\\Login.ts\n  - cypress\\e2e\\stepDefinition\\GenericSearch.ts\n  - cypress\\e2e\\stepDefinition\\DocumentSearch.ts\n  - cypress\\e2e\\stepDefinition\\CIPCReinstatement.ts\n  - cypress\\e2e\\stepDefinition\\CIPCDirector.ts\n  - cypress\\e2e\\stepDefinition\\CIPCCompany.ts\n  - cypress\\e2e\\stepDefinition\\BAVsearch.ts\n  - cypress\\e2e\\stepDefinition\\AutomatedValuation.ts\n  - cypress\\e2e\\stepDefinition\\AddressConversion.ts\n\nHowever, none of these files contained a step definition matching \"I confirm the Search Confirmation header from the search confirmation box\".\n\nYou can implement it using the suggestion(s) below.\n\n  Then(\"I confirm the Search Confirmation header from the search confirmation box\", function () {\n    return \"pending\";\n  });\n  ",
                "estack": "Error: \nStep implementation missing for \"I confirm the Search Confirmation header from the search confirmation box\".\n\nWe tried searching for files containing step definitions using the following search pattern templates:\n\n  - cypress/e2e/stepDefinition/*.ts\n\nThese templates resolved to the following search patterns:\n\n  - cypress\\e2e\\stepDefinition\\*.ts\n\nThese patterns matched the following files:\n\n  - cypress\\e2e\\stepDefinition\\WorldCompliance.ts\n  - cypress\\e2e\\stepDefinition\\WinDeedSpider.ts\n  - cypress\\e2e\\stepDefinition\\WindeedPropertyReport.ts\n  - cypress\\e2e\\stepDefinition\\TUVehicleEnquiry.ts\n  - cypress\\e2e\\stepDefinition\\Transfers.ts\n  - cypress\\e2e\\stepDefinition\\Property.ts\n  - cypress\\e2e\\stepDefinition\\PersonSearch.ts\n  - cypress\\e2e\\stepDefinition\\Login.ts\n  - cypress\\e2e\\stepDefinition\\GenericSearch.ts\n  - cypress\\e2e\\stepDefinition\\DocumentSearch.ts\n  - cypress\\e2e\\stepDefinition\\CIPCReinstatement.ts\n  - cypress\\e2e\\stepDefinition\\CIPCDirector.ts\n  - cypress\\e2e\\stepDefinition\\CIPCCompany.ts\n  - cypress\\e2e\\stepDefinition\\BAVsearch.ts\n  - cypress\\e2e\\stepDefinition\\AutomatedValuation.ts\n  - cypress\\e2e\\stepDefinition\\AddressConversion.ts\n\nHowever, none of these files contained a step definition matching \"I confirm the Search Confirmation header from the search confirmation box\".\n\nYou can implement it using the suggestion(s) below.\n\n  Then(\"I confirm the Search Confirmation header from the search confirmation box\", function () {\n    return \"pending\";\n  });\n  \n    at Context.eval (node_modules/@badeball/cypress-cucumber-preprocessor/dist/browser-runtime.js:513:0)",
                "diff": null
              },
              "uuid": "fe25892f-9704-4042-aa05-daab9ef1e38e",
              "parentUUID": "267b9139-8d85-4918-8ff5-b66b942a75ab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC5068 - Transfer - Not Found Seactional Scheme By Municipality",
              "fullTitle": "Transfers TC5068 - Transfer - Not Found Seactional Scheme By Municipality",
              "timedOut": null,
              "duration": 26904,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var _a, _b, _c, _d, _e;\n/**\n * This must always be true, otherwise something is off.\n */\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n    id: testCaseStartedId,\n    testCaseId,\n    attempt: attempt++,\n    timestamp: (0, messages_1.createTimestamp)(),\n});\nwindow.testState = {\n    gherkinDocument,\n    pickles,\n    pickle,\n};\nconst onAfterStep = (options) => {\n    var _a, _b, _c;\n    const { testStepId, start, result } = options;\n    const end = (0, messages_1.createTimestamp)();\n    if (result === \"pending\" || result === \"skipped\") {\n        if (result === \"pending\") {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.PENDING,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        else {\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: (0, messages_1.duration)(start, end),\n                },\n                timestamp: end,\n            });\n        }\n        remainingSteps.shift();\n        for (const skippedStep of remainingSteps) {\n            const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b = (_a = skippedStep.hook) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : (_c = skippedStep.pickleStep) === null || _c === void 0 ? void 0 : _c.id, \"Expected a step to either be a hook or a pickleStep\");\n            const testStepId = getTestStepId({\n                context,\n                pickleId: pickle.id,\n                hookIdOrPickleStepId,\n            });\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n            taskTestStepFinished(context, {\n                testStepId,\n                testCaseStartedId,\n                testStepResult: {\n                    status: messages.TestStepResultStatus.SKIPPED,\n                    duration: {\n                        seconds: 0,\n                        nanos: 0,\n                    },\n                },\n                timestamp: (0, messages_1.createTimestamp)(),\n            });\n        }\n        for (let i = 0, count = remainingSteps.length; i < count; i++) {\n            remainingSteps.pop();\n        }\n        cy.then(() => this.skip());\n    }\n    else {\n        taskTestStepFinished(context, {\n            testStepId,\n            testCaseStartedId,\n            testStepResult: {\n                status: messages.TestStepResultStatus.PASSED,\n                duration: (0, messages_1.duration)(start, end),\n            },\n            timestamp: end,\n        });\n        remainingSteps.shift();\n    }\n};\nfor (const step of steps) {\n    if (step.hook) {\n        const hook = step.hook;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: hook.id,\n        });\n        cy.then(() => {\n            delete window.testState.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const options = {\n                pickle,\n                gherkinDocument,\n                testCaseStartedId,\n            };\n            return (0, cypress_1.runStepWithLogGroup)({\n                fn: () => registry.runCaseHook(this, hook, options),\n                keyword: hook.keyword,\n                text: createStepDescription(hook),\n            }).then((result) => {\n                return { start, result };\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n    else if (step.pickleStep) {\n        const pickleStep = step.pickleStep;\n        const testStepId = getTestStepId({\n            context,\n            pickleId: pickle.id,\n            hookIdOrPickleStepId: pickleStep.id,\n        });\n        const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n        const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a = pickleStep.astNodeIds) === null || _a === void 0 ? void 0 : _a[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b = pickleStep.astNodeIds) === null || _b === void 0 ? void 0 : _b[0]}`);\n        const argument = ((_c = pickleStep.argument) === null || _c === void 0 ? void 0 : _c.dataTable)\n            ? new data_table_1.default(pickleStep.argument.dataTable)\n            : ((_e = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e === void 0 ? void 0 : _e.content)\n                ? pickleStep.argument.docString.content\n                : undefined;\n        cy.then(() => {\n            window.testState.pickleStep = step.pickleStep;\n            const start = (0, messages_1.createTimestamp)();\n            internalProperties.currentStep = { pickleStep };\n            internalProperties.currentStepStartedAt = start;\n            taskTestStepStarted(context, {\n                testStepId,\n                testCaseStartedId,\n                timestamp: start,\n            });\n            return cy.wrap(start, { log: false });\n        })\n            .then((start) => {\n            const beforeStepHooks = registry.resolveBeforeStepHooks(tags);\n            const afterStepHooks = registry.resolveAfterStepHooks(tags);\n            const options = {\n                pickle,\n                pickleStep,\n                gherkinDocument,\n                testCaseStartedId,\n                testStepId,\n            };\n            const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n                return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                    keyword: \"BeforeStep\",\n                    text: createStepDescription(beforeStepHook),\n                    fn: () => registry.runStepHook(this, beforeStepHook, options),\n                }));\n            }, cy.wrap({}, { log: false }));\n            return beforeHooksChain.then(() => {\n                try {\n                    return (0, cypress_1.runStepWithLogGroup)({\n                        keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n                        argument,\n                        text,\n                        fn: () => registry.runStepDefininition(this, text, argument),\n                    }).then((result) => {\n                        return afterStepHooks\n                            .reduce((chain, afterStepHook) => {\n                            return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                                keyword: \"AfterStep\",\n                                text: createStepDescription(afterStepHook),\n                                fn: () => registry.runStepHook(this, afterStepHook, options),\n                            }));\n                        }, cy.wrap({}, { log: false }))\n                            .then(() => {\n                            return { start, result };\n                        });\n                    });\n                }\n                catch (e) {\n                    if (e instanceof registry_1.MissingDefinitionError) {\n                        throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            });\n        })\n            .then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n    }\n}",
              "err": {
                "message": "Error: \nStep implementation missing for \"I confirm the Search Confirmation header from the search confirmation box\".\n\nWe tried searching for files containing step definitions using the following search pattern templates:\n\n  - cypress/e2e/stepDefinition/*.ts\n\nThese templates resolved to the following search patterns:\n\n  - cypress\\e2e\\stepDefinition\\*.ts\n\nThese patterns matched the following files:\n\n  - cypress\\e2e\\stepDefinition\\WorldCompliance.ts\n  - cypress\\e2e\\stepDefinition\\WinDeedSpider.ts\n  - cypress\\e2e\\stepDefinition\\WindeedPropertyReport.ts\n  - cypress\\e2e\\stepDefinition\\TUVehicleEnquiry.ts\n  - cypress\\e2e\\stepDefinition\\Transfers.ts\n  - cypress\\e2e\\stepDefinition\\Property.ts\n  - cypress\\e2e\\stepDefinition\\PersonSearch.ts\n  - cypress\\e2e\\stepDefinition\\Login.ts\n  - cypress\\e2e\\stepDefinition\\GenericSearch.ts\n  - cypress\\e2e\\stepDefinition\\DocumentSearch.ts\n  - cypress\\e2e\\stepDefinition\\CIPCReinstatement.ts\n  - cypress\\e2e\\stepDefinition\\CIPCDirector.ts\n  - cypress\\e2e\\stepDefinition\\CIPCCompany.ts\n  - cypress\\e2e\\stepDefinition\\BAVsearch.ts\n  - cypress\\e2e\\stepDefinition\\AutomatedValuation.ts\n  - cypress\\e2e\\stepDefinition\\AddressConversion.ts\n\nHowever, none of these files contained a step definition matching \"I confirm the Search Confirmation header from the search confirmation box\".\n\nYou can implement it using the suggestion(s) below.\n\n  Then(\"I confirm the Search Confirmation header from the search confirmation box\", function () {\n    return \"pending\";\n  });\n  ",
                "estack": "Error: \nStep implementation missing for \"I confirm the Search Confirmation header from the search confirmation box\".\n\nWe tried searching for files containing step definitions using the following search pattern templates:\n\n  - cypress/e2e/stepDefinition/*.ts\n\nThese templates resolved to the following search patterns:\n\n  - cypress\\e2e\\stepDefinition\\*.ts\n\nThese patterns matched the following files:\n\n  - cypress\\e2e\\stepDefinition\\WorldCompliance.ts\n  - cypress\\e2e\\stepDefinition\\WinDeedSpider.ts\n  - cypress\\e2e\\stepDefinition\\WindeedPropertyReport.ts\n  - cypress\\e2e\\stepDefinition\\TUVehicleEnquiry.ts\n  - cypress\\e2e\\stepDefinition\\Transfers.ts\n  - cypress\\e2e\\stepDefinition\\Property.ts\n  - cypress\\e2e\\stepDefinition\\PersonSearch.ts\n  - cypress\\e2e\\stepDefinition\\Login.ts\n  - cypress\\e2e\\stepDefinition\\GenericSearch.ts\n  - cypress\\e2e\\stepDefinition\\DocumentSearch.ts\n  - cypress\\e2e\\stepDefinition\\CIPCReinstatement.ts\n  - cypress\\e2e\\stepDefinition\\CIPCDirector.ts\n  - cypress\\e2e\\stepDefinition\\CIPCCompany.ts\n  - cypress\\e2e\\stepDefinition\\BAVsearch.ts\n  - cypress\\e2e\\stepDefinition\\AutomatedValuation.ts\n  - cypress\\e2e\\stepDefinition\\AddressConversion.ts\n\nHowever, none of these files contained a step definition matching \"I confirm the Search Confirmation header from the search confirmation box\".\n\nYou can implement it using the suggestion(s) below.\n\n  Then(\"I confirm the Search Confirmation header from the search confirmation box\", function () {\n    return \"pending\";\n  });\n  \n    at Context.eval (node_modules/@badeball/cypress-cucumber-preprocessor/dist/browser-runtime.js:513:0)",
                "diff": null
              },
              "uuid": "a8a33865-38c2-4c04-b3e5-2a5848e636f7",
              "parentUUID": "267b9139-8d85-4918-8ff5-b66b942a75ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "fe25892f-9704-4042-aa05-daab9ef1e38e",
            "a8a33865-38c2-4c04-b3e5-2a5848e636f7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 45860,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}